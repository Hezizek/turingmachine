#include "CLIHandler.h"

int main(int argc, char* argv[]) {
    return CLIHandler::Main(argc, argv);
}
#include "CLIHandler.h"
#include "ErrorHandler.h"
#include "TMParser.h"
#include "InputValidator.h"
#include "MachineSimulator.h"
#include "VerboseTracer.h"
#include "ResultPrinter.h"
#include <iostream>
#include <vector>
#include <string>

int CLIHandler::Main(int argc, char* argv[]) {
    bool showHelp = (argc == 1);
    for (int i = 1; i < argc && !showHelp; ++i) {
        std::string arg = argv[i];
        if (arg == "-h" || arg == "--help") {
            showHelp = true;
        }
    }
    if (showHelp) {
        CLIHandler::PrintHelp();
        return 0;
    }

    bool verboseMode = false;
    std::vector<std::string> filteredArgs;
    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "-v" || arg == "--verbose") {
            verboseMode = true;
        } else {
            filteredArgs.push_back(arg);
        }
    }

    if (filteredArgs.size() != 2) {
        ErrorHandler::ReportUsageError();
        return 1;
    }

    std::string tmFilePath = filteredArgs[0];
    std::string inputString = filteredArgs[1];

    TuringMachine turingMachine;
    try {
        turingMachine = TMParser::Parse(tmFilePath);
    } catch (const std::exception& e) {
        ErrorHandler::Report(e.what());
        return 1;
    } catch (...) {
        ErrorHandler::Report("Unknown error");
        return 1;
    }

    bool isValid = InputValidator::Validate(inputString, turingMachine.inputAlphabet);
    if (!isValid) {
        if (verboseMode) {
            ErrorHandler::ReportVerboseIllegalInput(inputString, turingMachine.inputAlphabet);
        } else {
            ErrorHandler::ReportIllegalInput();
        }
        return 1;
    }

    if (verboseMode) {
        VerboseTracer::SimulateAndTrace(turingMachine, inputString);
    } else {
        MachineConfiguration finalConfig = MachineSimulator::Simulate(turingMachine, inputString);
        ResultPrinter::PrintFinalResult(finalConfig);
    }

    return 0;
}
void CLIHandler::PrintHelp() {
    std::cout << "usage: turing [-v|--verbose] [-h|--help] <tm> <input>" << std::endl;
}
#include "InputValidator.h"

bool InputValidator::Validate(const std::string& inputString, const std::set<char>& inputAlphabet) {
    for (size_t i = 0; i < inputString.size(); ++i) {
        char symbol = inputString[i];
        if (inputAlphabet.find(symbol) == inputAlphabet.end()) {
            return false;
        }
    }
    return true;
}
#include "MachineSimulator.h"

MachineConfiguration MachineSimulator::Simulate(const TuringMachine& tm, const std::string& input) {
    MachineConfiguration config = MachineSimulator::initializeConfiguration(tm, input);
    int step = 0;
    while (true) {
        bool matched = false;
        for (const Transition& transition : tm.transitions) {
            if (transition.oldState != config.currentState) {
                continue;
            }
            if (MachineSimulator::matchSymbols(config, transition.oldSymbols, tm.blankSymbol)) {
                MachineSimulator::applyTransition(config, transition, tm.blankSymbol);
                matched = true;
                break;
            }
        }
        if (!matched) {
            break;
        }
        step = step + 1;
    }
    return config;
}
MachineConfiguration MachineSimulator::initializeConfiguration(const TuringMachine& tm, const std::string& input) {
    std::vector<Tape> tapes;
    for (int i = 0; i < tm.tapeCount; ++i) {
        Tape tape;
        if (i == 0) {
            for (size_t j = 0; j < input.size(); ++j) {
                tape.cells[static_cast<int>(j)] = input[j];
            }
        }
        tape.headPosition = 0;
        tapes.push_back(std::move(tape));
    }
    MachineConfiguration config;
    config.currentState = tm.initialState;
    config.tapes = std::move(tapes);
    return config;
}
bool MachineSimulator::matchSymbols(const MachineConfiguration& config, const std::vector<char>& expectedSymbols, char blank) {
    for (size_t i = 0; i < expectedSymbols.size(); ++i) {
        int headPos = config.tapes[i].headPosition;
        char symbol = blank;
        auto it = config.tapes[i].cells.find(headPos);
        if (it != config.tapes[i].cells.end()) {
            symbol = it->second;
        }
        char expected = expectedSymbols[i];
        if (expected == '*') {
            if (symbol == blank) {
                return false;
            }
        } else {
            if (symbol != expected) {
                return false;
            }
        }
    }
    return true;
}
void MachineSimulator::applyTransition(MachineConfiguration& config, const Transition& t, char /*blank*/) {
    for (size_t i = 0; i < config.tapes.size(); ++i) {
        Tape& tape = config.tapes[i];
        int headPos = tape.headPosition;
        char writeSymbol = t.newSymbols[i];
        if (writeSymbol != '*') {
            tape.cells[headPos] = writeSymbol;
        }
        Direction direction = t.directions[i];
        if (direction == Direction::LEFT) {
            tape.headPosition = headPos - 1;
        } else if (direction == Direction::RIGHT) {
            tape.headPosition = headPos + 1;
        } else {
            tape.headPosition = headPos;
        }
    }
    config.currentState = t.newState;
}
#include "TMParser.h"
#include <fstream>
#include <sstream>
#include <stdexcept>
#include <cctype>
#include <algorithm>

namespace {
    std::string Trim(const std::string& s) {
        auto begin = s.begin();
        auto end = s.end();

        while (begin != end && std::isspace(static_cast<unsigned char>(*begin))) {
            ++begin;
        }
        if (begin == end) {
            return std::string();
        }
        do {
            --end;
        } while (end != begin && std::isspace(static_cast<unsigned char>(*end)));
        return std::string(begin, end + 1);
    }

    bool startsWith(const std::string& s, const std::string& prefix) {
        return s.size() >= prefix.size() && std::equal(prefix.begin(), prefix.end(), s.begin());
    }

    std::set<char> toCharSet(const std::set<std::string>& tokens) {
        std::set<char> result;
        for (const auto& tok : tokens) {
            if (tok.size() != 1) {
                throw std::runtime_error("syntax error");
            }
            result.insert(tok[0]);
        }
        return result;
    }
}

TuringMachine TMParser::Parse(const std::string& filePath) {
    std::ifstream in(filePath);
    if (!in) {
        throw std::runtime_error("cannot open file");
    }

    TuringMachine tm;
    tm.transitions.clear();

    std::string line;
    while (std::getline(in, line)) {
        std::string trimmed = Trim(line);
        if (trimmed.empty() || (!trimmed.empty() && trimmed[0] == ';')) {
            continue;
        }

        if (startsWith(trimmed, "#Q")) {
            tm.states = TMParser::parseSet(trimmed, "state");
        } else if (startsWith(trimmed, "#S")) {
            tm.inputAlphabet = toCharSet(TMParser::parseSet(trimmed, "inputalphabet"));
        } else if (startsWith(trimmed, "#G")) {
            tm.tapeAlphabet = toCharSet(TMParser::parseSet(trimmed, "tapealphabet"));
            for (char symbol : tm.inputAlphabet) {
                if (tm.tapeAlphabet.find(symbol) == tm.tapeAlphabet.end()) {
                    throw std::runtime_error("syntax error");
                }
            }
        } else if (startsWith(trimmed, "#q0")) {
            std::string s = TMParser::parseSingle(trimmed);
            if (tm.states.find(s) == tm.states.end()) {
                throw std::runtime_error("syntax error");
            }
            tm.initialState = s;
        } else if (startsWith(trimmed, "#B")) {
            std::string s = TMParser::parseSingle(trimmed);
            if (s.size() != 1) {
                throw std::runtime_error("syntax error");
            }
            char b = s[0];
            if (tm.tapeAlphabet.find(b) == tm.tapeAlphabet.end() || b != '_') {
                throw std::runtime_error("syntax error");
            }
            tm.blankSymbol = b;
        } else if (startsWith(trimmed, "#F")) {
            tm.finalStates = TMParser::parseSet(trimmed, "state");
            for (const auto& state : tm.finalStates) {
                if (tm.states.find(state) == tm.states.end()) {
                    throw std::runtime_error("syntax error");
                }
            }
        } else if (startsWith(trimmed, "#N")) {
            tm.tapeCount = TMParser::parseInt(trimmed);
        } else {
            Transition t = TMParser::parseTransition(trimmed, tm.tapeCount, tm.states, tm.tapeAlphabet);
            tm.transitions.push_back(t);
        }
    }

    return tm;
}
std::set<std::string> TMParser::parseSet(const std::string& line, const std::string& type) {
    size_t pos = line.find(" = ");
    if (pos == std::string::npos || line.find(" = ", pos + 3) != std::string::npos) {
        throw std::runtime_error("syntax error");
    }

    std::string body = Trim(line.substr(pos + 3));
    if (body.size() < 2 || body.front() != '{' || body.back() != '}') {
        throw std::runtime_error("syntax error");
    }

    std::string content = body.substr(1, body.size() - 2);

    std::vector<std::string> items;
    size_t start = 0;
    while (true) {
        size_t comma = content.find(',', start);
        std::string token = (comma == std::string::npos)
            ? content.substr(start)
            : content.substr(start, comma - start);
        token = Trim(token);

        if (token.empty()) {
            throw std::runtime_error("syntax error");
        }

        if (type == "state") {
            for (char c : token) {
                if (!(std::isalnum(static_cast<unsigned char>(c)) || c == '_')) {
                    throw std::runtime_error("syntax error");
                }
            }
        } else if (type == "inputalphabet") {
            if (token.size() != 1) {
                throw std::runtime_error("syntax error");
            }
            char c = token[0];
            if (c == ' ' || c == ',' || c == ';' || c == '{' || c == '}' || c == '*' || c == '_') {
                throw std::runtime_error("syntax error");
            }
        } else if (type == "tapealphabet") {
            if (token.size() != 1) {
                throw std::runtime_error("syntax error");
            }
            char c = token[0];
            if (c == ' ' || c == ',' || c == ';' || c == '{' || c == '}' || c == '*') {
                throw std::runtime_error("syntax error");
            }
        }

        items.push_back(token);

        if (comma == std::string::npos) {
            break;
        }
        start = comma + 1;
    }

    return std::set<std::string>(items.begin(), items.end());
}
std::string TMParser::parseSingle(const std::string& line) {
    size_t pos = line.find(" = ");
    if (pos == std::string::npos || line.find(" = ", pos + 3) != std::string::npos) {
        throw std::runtime_error("syntax error");
    }
    return line.substr(pos + 3);
}
int TMParser::parseInt(const std::string& line) {
    std::string value = TMParser::parseSingle(line);
    value = Trim(value);
    if (value.empty()) {
        throw std::runtime_error("syntax error");
    }
    for (char c : value) {
        if (!std::isdigit(static_cast<unsigned char>(c))) {
            throw std::runtime_error("syntax error");
        }
    }
    try {
        return std::stoi(value);
    } catch (...) {
        throw std::runtime_error("syntax error");
    }
}
Transition TMParser::parseTransition(
    const std::string& line,
    int tapeCount,
    const std::set<std::string>& states,
    const std::set<char>& symbols
) {
    std::istringstream iss(line);
    std::vector<std::string> tokens;
    std::string tok;
    while (iss >> tok) {
        tokens.push_back(tok);
    }
    if (tokens.size() != 5) {
        throw std::runtime_error("syntax error");
    }

    const std::string& oldState = tokens[0];
    const std::string& readSymbols = tokens[1];
    const std::string& writeSymbols = tokens[2];
    const std::string& directionsStr = tokens[3];
    const std::string& newState = tokens[4];

    if (static_cast<int>(readSymbols.size()) != tapeCount ||
        static_cast<int>(writeSymbols.size()) != tapeCount ||
        static_cast<int>(directionsStr.size()) != tapeCount) {
        throw std::runtime_error("syntax error");
    }

    if (states.find(oldState) == states.end() || states.find(newState) == states.end()) {
        throw std::runtime_error("syntax error");
    }

    std::vector<char> oldSymbolsVec;
    std::vector<char> newSymbolsVec;
    std::vector<Direction> directionsVec;
    oldSymbolsVec.reserve(tapeCount);
    newSymbolsVec.reserve(tapeCount);
    directionsVec.reserve(tapeCount);

    for (int i = 0; i < tapeCount; ++i) {
        char r = readSymbols[i];
        char w = writeSymbols[i];
        char d = directionsStr[i];

        if (r != '*' && symbols.find(r) == symbols.end()) {
            throw std::runtime_error("syntax error");
        }
        if (w != '*' && symbols.find(w) == symbols.end()) {
            throw std::runtime_error("syntax error");
        }
        if (d != 'l' && d != 'r' && d != '*') {
            throw std::runtime_error("syntax error");
        }

        oldSymbolsVec.push_back(r);
        newSymbolsVec.push_back(w);
        if (d == 'l') {
            directionsVec.push_back(Direction::LEFT);
        } else if (d == 'r') {
            directionsVec.push_back(Direction::RIGHT);
        } else {
            directionsVec.push_back(Direction::STAY);
        }
    }

    Transition t;
    t.oldState = oldState;
    t.oldSymbols = std::move(oldSymbolsVec);
    t.newSymbols = std::move(newSymbolsVec);
    t.directions = std::move(directionsVec);
    t.newState = newState;
    return t;
}
void VerboseTracer::SimulateAndTrace(const TuringMachine& tm, const std::string& input) {
    ResultPrinter::PrintVerboseStart(input);
    MachineConfiguration config = MachineSimulator::initializeConfiguration(tm, input);
    int step = 0;
    while (true) {
        ResultPrinter::PrintVerboseStep(step, config);
        bool matched = false;
        for (const Transition& transition : tm.transitions) {
            if (transition.oldState != config.currentState) {
                continue;
            }
            if (MachineSimulator::matchSymbols(config, transition.oldSymbols, tm.blankSymbol)) {
                MachineSimulator::applyTransition(config, transition, tm.blankSymbol);
                matched = true;
                break;
            }
        }
        if (!matched) {
            break;
        }
        step = step + 1;
    }
    ResultPrinter::PrintVerboseResult(config);
}
void ResultPrinter::PrintFinalResult(const MachineConfiguration& config) {
    const Tape& tape = config.tapes[0];
    if (tape.cells.empty()) {
        std::cout << "" << std::endl;
        return;
    }

    int left = tape.cells.begin()->first;
    int right = tape.cells.rbegin()->first;

    std::string output;
    output.reserve(static_cast<size_t>(right - left + 1));
    for (int i = left; i <= right; ++i) {
        char symbol = '_';
        auto it = tape.cells.find(i);
        if (it != tape.cells.end()) {
            symbol = it->second;
        }
        output.push_back(symbol);
    }
    std::cout << output << std::endl;
}
void ResultPrinter::PrintVerboseStart(const std::string& input) {
    std::cout << "Input: " << input << std::endl;
    std::cout << "==================== RUN ====================" << std::endl;
}
void ResultPrinter::PrintVerboseStep(int step, const MachineConfiguration& config) {
    std::cout << "Step   : " << step << std::endl;
    std::cout << "State  : " << config.currentState << std::endl;

    for (size_t i = 0; i < config.tapes.size(); ++i) {
        const Tape& tape = config.tapes[i];
        int head = tape.headPosition;

        int left = head;
        int right = head;
        if (!tape.cells.empty()) {
            left = std::min(left, tape.cells.begin()->first);
            right = std::max(right, tape.cells.rbegin()->first);
        }

        std::ostringstream indexPrefix, tapePrefix, headPrefix;
        indexPrefix << "Index" << i << " :";
        tapePrefix << "Tape" << i << "  :";
        headPrefix << "Head" << i << "  :";

        std::string indexLine = indexPrefix.str();
        std::string symbolLine = tapePrefix.str();
        std::string headLine = headPrefix.str();

        for (int j = left; j <= right; ++j) {
            std::string indexStr = std::to_string(std::abs(j));
            char symbol = '_';
            auto it = tape.cells.find(j);
            if (it != tape.cells.end()) {
                symbol = it->second;
            }
            bool isHead = (j == head);
            std::string pad(indexStr.size(), ' ');

            indexLine += " " + indexStr;
            symbolLine += pad;
            symbolLine.push_back(symbol);
            headLine += pad;
            headLine += (isHead ? "^" : " ");
        }

        std::cout << indexLine << std::endl;
        std::cout << symbolLine << std::endl;
        std::cout << headLine << std::endl;
    }
    std::cout << "---------------------------------------------" << std::endl;
}
void ResultPrinter::PrintVerboseResult(const MachineConfiguration& config) {
    const Tape& tape = config.tapes[0];
    if (tape.cells.empty()) {
        std::cout << "Result: " << std::endl;
    } else {
        int left = tape.cells.begin()->first;
        int right = tape.cells.rbegin()->first;
        std::string output;
        output.reserve(static_cast<size_t>(right - left + 1));
        for (int i = left; i <= right; ++i) {
            char symbol = '_';
            auto it = tape.cells.find(i);
            if (it != tape.cells.end()) {
                symbol = it->second;
            }
            output.push_back(symbol);
        }
        std::cout << "Result: " << output << std::endl;
    }
    std::cout << "==================== END ====================" << std::endl;
}
#include "ErrorHandler.h"
#include <iostream>

void ErrorHandler::Report(const std::string& errorMessage) {
    std::cerr << errorMessage << std::endl;
}
void ErrorHandler::ReportUsageError() {
    std::cerr << "usage: turing [-v|--verbose] [-h|--help] <tm> <input>" << std::endl;
}
void ErrorHandler::ReportIllegalInput() {
    std::cerr << "illegal input" << std::endl;
}
void ErrorHandler::ReportVerboseIllegalInput(const std::string& input, const std::set<char>& inputAlphabet) {
    std::cout << "Input: " << input << std::endl;
    std::cout << "==================== ERR ====================" << std::endl;
    for (size_t i = 0; i < input.size(); ++i) {
        char c = input[i];
        if (inputAlphabet.find(c) == inputAlphabet.end()) {
            std::cout << "error: '" << c << "' was not declared in the set of input symbols" << std::endl;
            std::cout << "Input: " << input << std::endl;
            std::string marker(i, ' ');
            marker += "^";
            std::cout << "       " << marker << std::endl;
            break;
        }
    }
    std::cout << "==================== END ====================" << std::endl;
}


The total prompt token usage is:  136852
The total completion token usage is:  21418
